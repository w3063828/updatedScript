First the lib_ files are explained, in part 2 the math involved gets explained.

SET PATCHED CONICS TO MAX
_______________________________________________________________________________________________________________

lib_closest_approach: finds the closest approach between two objects

  + DistanceAtTime(T, TargetDestination) Looks at the distance between current vessel and target
    vessel at given time.
  + CATS(TargetBody, Left, Right, AbsolutePrecision) Closest Approach Ternary Search looks at
    the distance at a certain time and gets rid of the part that's not close.
  + ClosestApproachFinder(TargetBody) Uses CATS to calculate the closest approach.
  + OtherClosestApproachFinder(TargetBody) Same as ClosestApproachFinder() but the starting point
    and the end point have been switched.
_______________________________________________________________________________________________________________

lib_docking: docking procedure with safety steps

  + PortGetter(NameOfVessel, PrePickedPort) Sets the first available docking port to a variable
    (if a pre-picked port hasn't been chosen) so it can be reffered to in the future.
  + Translate(SomeVector) RCS will try to go to given vector.
  + KillRelVelRCS(TargetDockingPort) Kills relative velocity with a docking port (shouldn't
    matter if it's the docking port or just the target ship).
  + ApproachDockingPort(ShipDockingPort, TargetDockingPort, Distance, Speed, ErrorAllowed)
    Approaches the target docking port controlled from the ship's docking port. It goes to
    (Distance) meters infront of the target at given speed. It cant be more than (ErrorAllowed)
    meters off of the target.
  + EnsureRange(ShipDockingPort, TargetDockingPort, Distance, Speed) Makes sure that ship is
    in safe range of target and won't hit the target ship by accident.
  + SidewaysApproach(ShipDockingPort, TargetDockingPort, Distance, Speed) Same as EnsureRange()
    but goes to the side so the ship won't try to go right through the target vessel when close.
  + Dock(TargetDestination) Takes all docking functions from above and combines them into one
    script.
_______________________________________________________________________________________________________________

lib_gapapov_main: checks if given parameters by gui@ are valid and sets the target

  + GAPAPOV(GivenParameterList) Checks if given parameters by gui@ are valid and sets the target.
_______________________________________________________________________________________________________________

lib_gui: sets up the pop up message in which you can enter the target destination.
  + GUISetup1()              Sets up basic GUI windows.
  + CheckOptions()           Shows current errors.
  + RendOptions()            Gives options to enter rendezvous stuff
  + RendOptionsConf()        Confirms rendezvous options
  + BodyNameCheck()          Checks if the given body name is real
  + PeriapsisCheck()         Checks if periapsis is above 0 m or above the atmosphere height.
  + InclinationCheck()       Checks if a valid inclination was given.
  + FalseErrorSetter()       Sets all errors to false.
  + GUISetup2()              Cancel and confrim buttons.
  + ConfirmOptions()         Executes confirm button.
  + CancelOptions()          Executes cancel button.
  + ErrorMessageShower()     Shows error message.
  + CompleteParameterGUI()   Uses all of the functions mentioned above.
_______________________________________________________________________________________________________________

lib_hillclimb_man_exe: performs a burn using a maneuver node

  + DvCalc(Input) Calculates how much Dv is left after the burn.
  + TimeTillManeuverBurn(StartTime, DvNeeded, ThrustLimit) Calculates when to start burning.
  + PerformBurn(EndDv, StartT, ThrustLimit, NoManeuver) Performs burn till EndDv is as big as CurDv,
    locks steering to the burn vector of the maneuver, if NoManeuver is true it won't lock steering
    to the burn vector (because it would give an error).
_______________________________________________________________________________________________________________

lib_hillclimb_scoring: has different scoring types for lib_hillclimb_universal to use

  + ScoreCircularize(ScoreList) Gives score on how circular the orbit is.
  + ScoreInclination(ScoreList) Gives score on how inclined the orbit is.
  + ScoreApoapsis(ScoreList) Gives score on how big the apoapsis is.
  + ScorePeriapsis(ScoreList) Gives score on how big the periapsis is.
  + OrbitParamGetter(ObjectName, OrbitalParameter) Gives orbital parameters.
  + ScoreVarMatch(ScoreList, ApoPerList) 'Universal' apoapsis/periapsis score function.
  + ScoreApoMatch(ScoreList) Gives score on how close the apoapsis is too a target.
  + ScorePerApoMatch(ScoreList) Gives score on how close the periapsis is too a target.
  + ScorePerPerMatch(ScoreList) Gives score on how close the apoapsis is too a target.
  + ScoreMoonTransfer(ScoreList) Gives score on how close maneuver is to given moon.
  + ScoreInterplanetary(ScoreList) Gives score on how close maneuver is to given planet.
  + ScoreFinalCorrection(ScoreList) Makes final corrections for ScoreInterplanetary@.
_______________________________________________________________________________________________________________

lib_hillclimb_universal: universal maneuver node hillclimber (lower score is better than a higher score)

  + ResultFinder(NodeList, ScoreType, ScoreList, RestrictionTypeList) Finds best node.
  + ScoreImproveCompare(InitialNodeList, ScoreType, ScoreList, RestrictionType, Increment)
    Scores a node and then improves the node and scores it again. This goes on until a better
    score isnt available.
  + Score(NodeList, ScoreType, ScoreList, DeltaVCap) Scores node on basis of given score type.
  + ScoreExecuter(ScoreType, WantedScoreType, ScoreList) Performs scoring.
  + StepFunction(StepType, StepSize, NodeList, RestrictionType) Increments every value of the
    node by a value of StepSize.
  + EvenOrUnevenChecker(Number) Checks if number is even or uneven (for StepFunction@).
  + Improve(NodeList, ScoreType, ScoreList, CurrentDv, RestrictionType, Increment)
    Scores the incremented nodes and picks the best one.
  + CurrentDVGetterx() Gets current delta v.
  + IndexFiveFolderder(WantedIndex) Makes list with five times the same index.
_______________________________________________________________________________________________________________

lib_inclination: calculates when and how much to burn to match inclination with a target

  + RelativeAngleCalculation(TargetDestination) Calculates the relative angle between ship and target.
  + AscenDescenFinder(TargetDestination) Calculates where the AN/DN are.
  + DeltaVTheta(TrueAnomaly, ThetaNeeded) Calculates how much Dv is needed to match inclination.
  + InclinationMatcher(TargetDestination) Performs burn to match inclination with target.
_______________________________________________________________________________________________________________

lib_other: other functions which are too small to categorize

  + Ish(a,b,ishyness) Asks for two parameters and checks if they are "ish" removed from eachother.
  + DestinationSplitter(Destination) Checks the state of the target destination.
  + VisViva(StartAlt, TargetSMA) Calculates Dv needed for a burn.
  + CurrentDvCalc() Calculates the current dv.
  + DistanceAtTime(T, TargetDestination) Same as lib_closest_approach's function.
  + ClosestApproachGetter(PeriodPrecision, T, SurpassThis, TargetDestination)
    More computing power needed for this approach than CATS@ but essentialy the same.
  + ClosestApproachRefiner(TargetDestination, PrecisionNumber) Performs ClosestApproachGetter@.
  + RemoveAllNodes() Removes all nodes.
_______________________________________________________________________________________________________________

lib_phase_angle: calculates phase angle and ejection angle needed for visiting another planet

  + PhaseAngleCalculation(TargetDestination, StartingPoint, ReferenceBody) Calculates the needed phase
    angle for optimal burn.
  + CurrentPhaseAngleFinder(TargetPlanet, ReferenceBody, StartingBody) Finds current phase angle.
  + GetGrandparentBody() Gets the 'parent' of the planet you are orbiting.
  + EjectionAngleVelocityCalculation(TargetDestination) Calculates ejection angle and Dv for burn.
_______________________________________________________________________________________________________________

lib_rendezvous: rendezvous with ship or planet

  + EnsureSmallerOrbit(TargetDestination) Ensures that current vessel is in a smaller orbit.
  + RendezvousSetup(TargetDestination) Matches argument of periapsis.
  + MatchOrbit(TargetDestination) Matches orbit with target.
  + FinalApproach(TargetDestination, StepsNeeded) Increases orbit so the target will meet.
  + MainRelVelKill(TargetDestination) Kills relative velocity with the target.
  + VeryFinalApproach(TargetDestination) Goes straight to the target.
  + CompleteRendezvous(TargetDestination) Combines the functions mentioned and performs a rendezvous.
_______________________________________________________________________________________________________________

lib_science: does science and transmits it

  + ListScienceModules() Puts all science experiments in a list.
  + GetSpecifiedResource() Takes one parameter, a search term, and returns the resource with that search
    term.
  + WaitForCharge() Checks if there's enough electricity to transmit and waits if not.
  + TransmitScience() Checks list and transmits its data.
  + PerformScienceExperiments() Runs all re-runnable science experiments and transmit the results.
  // add Function that performs all non re-runnable science experiments
_______________________________________________________________________________________________________________

lib_stage: checks when to stage and stages

  + StageCheck() Checks if max thrust has gotten lowered and stages if so.
  + EndStage(EndStage) Stages till the desired stage has been reached.
  + LaunchStage() Stages till there is a max thrust bigger than 0.

_____________________________________________________________________________________________________________

lib_steering: does steering, can also point in the right direction in advance. Default is 0 seconds

  + SteeringOrbitRet(TimeTill) Points at what will be retrograde in TimeTill seconds.
  + SteeringOrbitPro(TimeTill) Points at what will be prograde in TimeTill seconds.
  + SteeringOrbitNorm(TimeTill) Points at what will be normal in TimeTill seconds.
  + SteeringOrbitAntNorm(TimeTill) Points at what will be anti-normal in TimeTill seconds.
  + SteeringTargetPro(TarShip, TimeTill) Points at target ship's relative prograde in TimeTill seconds.
  + SteeringTargetRet(TarShip, TimeTill) Points at target ship's relative retrograde in TimeTill seconds.
  + SteeringTarget(TarShip, TimeTill) Points at target ship in TimeTill seconds.
  + SteeringAntiTarget(TarShip, TimeTill) Points away from target ship in TimeTill seconds.
  + SteeringTarget(TargetManeuver) Points at specified maneuver burn point.
_____________________________________________________________________________________________________________

lib_transfer_burns:

  + InsertionBurn(TargetDestination, TargetPeriapsis) Uses the hillclimb functions.
  + ExitSOI(TargetDestination) Goes to SOI exit.
  + CorrectionBurn(TargetDestination, TargetPeriapsis) Performs a correction burn.
  + FinalCorrectionBurn(TargetDestination, TargetPeriapsis, TargetInclination) Final burn.
  + MoonInsertionBurn(TargetDestination, TargetPeriapsis, TargetInclination) Moon insertion burn.
  + MoonCorrectionBurn(TargetDestination, TargetPeriapsis, TargetInclination) Moon correction burn.
  + MoonPostEncounterBurn(TargetPeriapsis, TargetInclination) Burn performed when in moon's SOI.
  + InclinationMatcher2(TargetInclination) Primitive inclination matcher.
_______________________________________________________________________________________________________________

lib_transfer: performs transfers

  + InterplanetaryTransfer(TargetDestination, TargetPeriapsis, TargetInclination, PreciseCirc)
    Performs burns to get the desired orbit around the target planet.
  + MoonTransfer(TargetDestination, TargetPeriapsis, TargetInclination, AccidentalInterceptFromPlanet)
    Performs burns to get the desired orbit around the target moon.
  + MoonToReferencePlanet(StartingBody, TargetPlanet, TargetPeriapsis, TargetInclination)
    Performs burns to go the moon's parent body with desired orbital parameters
_______________________________________________________________________________________________________________

lib_true_anomaly: calculates all sorts of stuff surrounding true anomaly

  + TrueAnomalyAtTime(TimeTill, TargetObject) calculates true anomaly at a certain time.
  + TimePeToTa(TargetObject, TADeg) calculates time from periapsis till true anomaly given.
  + ETAToTrueAnomaly(TargetObject, DesiredTrueAnomaly, TimeTill) calculates time till true anomaly.
_____________________________________________________________________________________________________________

lib_warp: warps to phase angle and ejection angle

  + GetAllowedTimeWarp() Gets allowed timewarp (needs some fine tuning).
  + WarpToPhaseAngle(TargetDestination, TimeWarpStep, Ishyness) warps to needed phase angle using
    lib_phase_angle().
  + WarpToEjectionAngle(TargetDestination, TimeWarpStep, Ishyness) warps to needed ejection angle using
    lib_phase_angle().
_____________________________________________________________________________________________________________

  - TaAtTime -
  Finds the true anomaly at a given time of a given vessel. Uses a derivative of
  the 'Radius from true anomaly' formula. Also looks at the vector dot product of
  the position vector (imgur.com/Nz9N088) at the given time and the velocity vector
  at the given time. If this is negative the true anomaly is 360 - calculated true
  anomaly, if the dot product is positive the calculated true anomaly is correct.

  - ETAToTa -
  Uses TaAtTime, if no start time is declared the default is time:seconds, resulting
  in the current true anomaly. If a start time is declared it will calculate in how
  much time it'll take for the given vessel to go from the start time to a certain
  true anomaly (since orbits arent 100% circular the calculated start time's true
  anomaly does NOT equal to current true anomaly + (delta true anomaly)/true anomaly
  per second).
  Then it calculates the estimated time of arrival at the periapsis using the TimePeToTa
  function. If the time to periapsis from the target true anomaly - the time to periapsis
  from the given time's true anomaly is negative it means you already passed this point
  and need to add the orbital period of given vessel to the time.
  Now you have the time it'll take to go from the true anomaly at the given time to
  the target true anomaly of the given vessel.

  - TimePeToTa -
  Calculates the time till periapsis by calculating the eccentric anomaly and the
  mean anomaly of the given vessel. Also calculates the mean motion.
  Since the periapsis has a true anomaly of 0, the eccentric anomaly is 0 and so is
  the mean anomaly. Now you can easily calculated the time till periapsis.
